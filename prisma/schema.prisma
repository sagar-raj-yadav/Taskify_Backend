// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users{
  id Int @id @default(autoincrement())
  name String 
  email String @unique
  password String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Card {
  id Int @id @default(autoincrement())
  name String
  tasks Task[]  @relation("CardTasks")  // Ek card ke andar multiple tasks
  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
}


model Task{
  id Int @id @default(autoincrement())
  name String
  description String
  status String
  priority String
  dueDate DateTime
  cardId Int
  members Member[]    @relation("TaskMembers")  // Multiple members assigned to task
  card   Card    @relation("CardTasks", fields:[cardId], references: [id])
  comments Comment[]  // Multiple comments related to the task
  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
}



model Member{
  id Int @id @default(autoincrement())
  name String
  email String @unique
  assignedTasks Task[] @relation("TaskMembers")
  comments     Comment[] 
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  taskId    Int
  task      Task      @relation(fields: [taskId], references: [id])
  memberId    Int?
  member      Member?   @relation(fields: [memberId], references: [id]) 
  createdAt DateTime  @default(now())
}